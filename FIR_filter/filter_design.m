coeffs = design_filter;

% show the freq response of the un-quantized filter 
freqz(coeffs,1);

% quantize the coefficients
s = 1; % signed
w = 16; % 16-bit words
f = 15; % 15-bit fractions (since coefficients are b/w -1 and 1)
quantized_coeffs = quantizenumeric(coeffs,s,w,f,'nearest');

% show the freq response of the quantized filter
fig = figure;
figure(fig);
freqz(quantized_coeffs, 1);

% save coefficients as a verilog array
exportCoefficients("filter_parameters.sv", quantized_coeffs, w, f);
% TODO: testing, remove these:
x = ones(500,1);
x_fi = fi(x, 1, 16,15);
q = fi(quantized_coeffs,1,w,f);
r = conv(x_fi,q)

function exportCoefficients(filename, quantized_coeffs, w, f)
    q = fi(quantized_coeffs,1,w,f);
    % start parameter declarations
    [abs_path, fname, ext] = fileparts(mfilename("fullpath"));
    fileID = fopen(fullfile(abs_path, filename), 'w');
    fprintf(fileID, "parameter int COEFF_WIDTH = %d;\n", w);
    fprintf(fileID, "parameter int N_TAPS = %d;\n", length(quantized_coeffs));
    fprintf(fileID, "parameter logic signed[COEFF_WIDTH-1:0] filter_coeffs[0:N_TAPS-1] = {\n");
    
    % loop through coefficients and add to file
    for c = 1:length(q)-1
        tmp = q(c);
        fprintf(fileID, "    16'b%s,\n", tmp.bin);
    end

    % print the last coefficient and close out the file
    tmp = q(length(q));
    fprintf(fileID, "    16'b%s\n};\n", tmp.bin);
    fclose(fileID);
end

% FILTER_DESIGN Returns a discrete-time filter object.
% Generated with MATLAB's filterDesigner with some manual modifications by me
function coeffs = design_filter

% MATLAB Code
% Generated by MATLAB(R) 23.2 and DSP System Toolbox 23.2.
% Generated on: 19-Feb-2024 14:21:30

% Equiripple Lowpass filter designed using the FIRPM function.

% All frequency values are normalized to 1.

Fpass = 0.2;            % Passband Frequency
Fstop = 0.23;           % Stopband Frequency
Dpass = 0.13163040614;  % Passband Ripple
Dstop = 0.0001;         % Stopband Attenuation
dens  = 20;             % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop], [1 0], [Dpass, Dstop]);

% Calculate the coefficients using the FIRPM function.
coeffs = firpm(N, Fo, Ao, W, {dens});
end